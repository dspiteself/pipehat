(require '[pipehat.api :as hl7])

;; Round-trip
(def input
  (str
    "MSH|^~\\&|GHH LAB|ELAB-3|GHH OE|BLDG4|200202150930||ORU^R01|CNTRL-3456|P|2.4\r"
    "PID|||555-44-4444||EVERYWOMAN^EVE^E^^^^L|JONES|196203520|F|||153 FERNWOOD DR.^^STATESVILLE^OH^35292||(206)3345232|(206)752-121||||AC555444444||67-A4335^OH^20030520\r"
    "OBR|1|845439^GHH OE|1045813^GHH LAB|1554-5^GLUCOSE|||200202150730||||||||555-55-5555~555-66-6666-666^PRIMARY^PATRICIA P^^^^MD^^LEVEL SEVEN HEALTHCARE, INC.|||||||||F||||||444-44-4444^HIPPOCRATES^HOWARD H^^^^MD\r"
    "OBX|1|SN|1554-5^GLUCOSE^POST 12H CFST:MCNC:PT:SER/PLAS:QN||^182|mg/dl|70_105|H|||F\r"))

(hl7/read-str input)
(tap> *1)

(hl7/write-str *2)
(assert (= input *1))

;; Read from file
(require '[clojure.java.io :as io])
(import '(java.io PushbackReader))

(with-open [reader (PushbackReader. (io/reader "samples/sample-v2.4-oru-r01-2.hl7"))]
  (hl7/read reader))

;; Shape
(with-open [reader (PushbackReader. (io/reader "samples/sample-v2.5.1-oru-r01-1.hl7"))]
  (hl7/shape (hl7/read reader)))

(get-in *1 [:PID 0 [:PID 3] [:PID 3 6] [:PID 3 6 3]])

(with-open [reader (PushbackReader. (io/reader "samples/sample-v2.4-oru-r01-1.hl7"))]
  (hl7/shape (hl7/read reader)))

;; MLLP over TCP socket

(import '(java.net ServerSocket))
(import '(java.net Socket))
(import '(java.io InputStreamReader OutputStreamWriter))
(import '(java.io BufferedReader BufferedWriter))
(import '(java.io PushbackReader))
(import '(java.time LocalDateTime))

(defn timestamp [] (str (LocalDateTime/now)))

(comment (timestamp) ,,,)

;; Run a server socket in a random available port.
(def server (ServerSocket. 0))

(def dialog (atom []))

(defn ACK
  "Given a HL7 message, return a HL7 ACK message (AA)."
  [msg]
  (let [trigger-event (-> msg (nth 0) (nth 1) (nth 8) (nth 1))
        message-control-id (-> msg (nth 0) (nth 1) (nth 9))]
    [[:MSH ["|" "^~\\&" "SERVER" "ACME" "CLIENT" "ACME" (timestamp) nil ["ACK" trigger-event] message-control-id "P" "2.5"]]
     [:MSA ["AA" message-control-id "OK"]]]))

(def server-fut
  (future
    ;; Wait for connections. Set the read timeout to 1 minute.
    (with-open [socket (doto (.accept server) (.setSoTimeout 60000))
                reader (-> socket .getInputStream InputStreamReader. BufferedReader. PushbackReader.)
                writer (-> socket .getOutputStream OutputStreamWriter. BufferedWriter.)]
      ;; Read an MLLP-framed HL7 message off the socket.
      (let [msg (hl7/read reader {:protocol :mllp})]
        (swap! dialog conj {:from :client :to :server :msg msg})
        ;; Write an MLLP-framed ACK message into the socket.
        (hl7/write writer (ACK msg) {:protocol :mllp})))))

(comment (future-done? server-fut) ,,,)

;; Connect to the server socket.
(def client (Socket. "localhost" (.getLocalPort server)))

;; Create a HL7 message to send to the server.
(defn make-msg
  []
  [[:MSH ["|" "^~\\&" "CLIENT" "ACME" "SERVER" "ACME" (timestamp) nil ["SIU" "S14"] "85918" "P" "2.5"]]])

(with-open [writer (-> client .getOutputStream OutputStreamWriter. BufferedWriter.)]
  ;; Write the HL7 message into the socket.
  (hl7/write writer (make-msg) {:protocol :mllp})
  ;; Read the ACK message off the socket.
  (with-open [reader (-> client .getInputStream InputStreamReader. BufferedReader. PushbackReader.)]
    (let [recv-msg (hl7/read reader {:protocol :mllp})]
      (swap! dialog conj {:from :server :to :client :msg recv-msg}))))

;; See the dialog between the client and the server.
(deref dialog)

(.close client)
(.close server)
